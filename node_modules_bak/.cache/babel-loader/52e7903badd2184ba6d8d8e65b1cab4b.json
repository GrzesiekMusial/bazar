{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\dev\\\\TESTY\\\\TEST NATIVE\\\\bazar\\\\src\\\\app\\\\components\\\\board\\\\addBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport config from \"../../config/config.json\";\nimport { validationSchema } from \"./models/board\";\nimport * as Forms from \"../common/form/forms\";\nimport * as base from \"../../../methods/data\";\nimport Spinner from \"../common/spinner\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AddBoard = props => {\n  _s();\n\n  const [image, setImage] = useState([]);\n  const [edit, setEdit] = useState(null);\n  const [load, setLoad] = useState(true);\n  const {\n    title,\n    history,\n    match\n  } = props;\n  const back = useHistory();\n  useEffect(async () => {\n    try {\n      title(config.headers.newPost);\n      await base.getOneNotice(match.params.id, setEdit, setImage);\n      setLoad(false);\n    } catch (ex) {\n      console.log(\"back\");\n      return back.push(props.location.back, props.location.state);\n    }\n  }, []);\n\n  const handleSave = async values => {\n    try {\n      await base.noticeSave(values, edit, image);\n      if (props.location.back) return back.push(props.location.back, props.location.state);\n      back.push(\"/board\");\n    } catch (ex) {\n      setLoad(false);\n    }\n  };\n\n  const handleDelete = async id => {\n    const result = image.filter(img => img !== id && img.name !== id);\n    setImage(result);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen\",\n    children: [load && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen__container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addBoard\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"addBoard__images\",\n          children: /*#__PURE__*/_jsxDEV(Forms.Image, {\n            handleChange: setImage,\n            preview: image,\n            handleDelete: handleDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          enableReinitialize: true,\n          initialValues: edit ? {\n            text: edit.text,\n            title: edit.title\n          } : {\n            text: \"\",\n            title: \"\"\n          },\n          onSubmit: values => handleSave(values),\n          validationSchema: validationSchema,\n          children: ({}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Forms.Input, {\n              className: \"addBoard__title\",\n              name: \"title\",\n              placeholder: config.info.title,\n              defaultValue: edit ? edit.title : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Forms.Text, {\n              className: \"addBoard__text\",\n              name: \"text\",\n              placeholder: config.info.description,\n              defaultValue: edit ? edit.text : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"addBoard__buttons\",\n              children: /*#__PURE__*/_jsxDEV(Forms.Submit, {\n                className: \"actionBtn\",\n                title: config.actions.save\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddBoard, \"YKfmTcXYkg0nzGjPrZOsR6TtIGo=\", false, function () {\n  return [useHistory];\n});\n\n_c = AddBoard;\nexport default AddBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddBoard\");","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/app/components/board/addBoard.jsx"],"names":["React","useEffect","useState","Formik","ToastContainer","config","validationSchema","Forms","base","Spinner","useHistory","AddBoard","props","image","setImage","edit","setEdit","load","setLoad","title","history","match","back","headers","newPost","getOneNotice","params","id","ex","console","log","push","location","state","handleSave","values","noticeSave","handleDelete","result","filter","img","name","text","info","description","actions","save"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport config from \"../../config/config.json\";\r\n\r\nimport { validationSchema } from \"./models/board\";\r\n\r\nimport * as Forms from \"../common/form/forms\";\r\nimport * as base from \"../../../methods/data\";\r\nimport Spinner from \"../common/spinner\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AddBoard = (props) => {\r\n    const [image, setImage] = useState([]);\r\n    const [edit, setEdit] = useState(null);\r\n    const [load, setLoad] = useState(true);\r\n\r\n    const { title, history, match } = props;\r\n    const back = useHistory();\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            title(config.headers.newPost);\r\n            await base.getOneNotice(match.params.id, setEdit, setImage);\r\n            setLoad(false);\r\n        } catch (ex) {\r\n            console.log(\"back\");\r\n            return back.push(props.location.back, props.location.state);\r\n        }\r\n    }, []);\r\n\r\n    const handleSave = async (values) => {\r\n        try {\r\n            await base.noticeSave(values, edit, image);\r\n            if (props.location.back)\r\n                return back.push(props.location.back, props.location.state);\r\n            back.push(\"/board\");\r\n        } catch (ex) {\r\n            setLoad(false);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (id) => {\r\n        const result = image.filter((img) => img !== id && img.name !== id);\r\n        setImage(result);\r\n    };\r\n\r\n    return (\r\n        <div className=\"screen\">\r\n            {load && <Spinner />}\r\n            <ToastContainer />\r\n            <div className=\"screen__container\">\r\n                <div className=\"addBoard\">\r\n                    <div className=\"addBoard__images\">\r\n                        <Forms.Image\r\n                            handleChange={setImage}\r\n                            preview={image}\r\n                            handleDelete={handleDelete}\r\n                        />\r\n                    </div>\r\n\r\n                    <Formik\r\n                        enableReinitialize={true}\r\n                        initialValues={\r\n                            edit\r\n                                ? {\r\n                                      text: edit.text,\r\n                                      title: edit.title,\r\n                                  }\r\n                                : {\r\n                                      text: \"\",\r\n                                      title: \"\",\r\n                                  }\r\n                        }\r\n                        onSubmit={(values) => handleSave(values)}\r\n                        validationSchema={validationSchema}\r\n                    >\r\n                        {({}) => (\r\n                            <>\r\n                                <Forms.Input\r\n                                    className=\"addBoard__title\"\r\n                                    name=\"title\"\r\n                                    placeholder={config.info.title}\r\n                                    defaultValue={edit ? edit.title : null}\r\n                                />\r\n                                <Forms.Text\r\n                                    className=\"addBoard__text\"\r\n                                    name=\"text\"\r\n                                    placeholder={config.info.description}\r\n                                    defaultValue={edit ? edit.text : null}\r\n                                />\r\n                                <div className=\"addBoard__buttons\">\r\n                                    <Forms.Submit\r\n                                        className=\"actionBtn\"\r\n                                        title={config.actions.save}\r\n                                    />\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddBoard;\r\n"]},"metadata":{},"sourceType":"module"}