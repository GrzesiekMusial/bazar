{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\TESTY\\\\TEST NATIVE\\\\bazar\\\\src\\\\app\\\\components\\\\addProduct.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport * as base from \"./common/base\";\nimport * as catBase from \"../../api/categories\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport AddTextBox from \"./common/form/addTextBox\";\nimport AddInputBox from \"./common/form/addInputBox\";\nimport AddSelectBox from \"./common/form/addSelectBox\";\nimport AddSubmitButton from \"./common/form/submitButton\";\nimport MultiImageInput from \"react-multiple-image-input\";\nconst validationSchema = Yup.object().shape({\n  title: Yup.string().required(\"Nazwa jest wymagana.\").min(3).typeError(\"Nieprawidłowa wartość.\").max(120).label(\"Nazwa\"),\n  text: Yup.string().max(6000),\n  price: Yup.number().typeError(\"Nieprawidłowa wartość.\").max(9000000).test(\"is-decimal\", \"invalid decimal\", value => (value + \"\").match(/d*/)),\n  category: Yup.string().required().max(20)\n});\n\nconst AddProduct = props => {\n  _s();\n\n  const [image, setImage] = useState([]);\n  const [categories, setCategories] = useState(null);\n  useEffect(() => {\n    props.title(\"sprzedaj\");\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    const result = await catBase.get();\n    setCategories(result.data);\n  };\n\n  function toFixedIfNecessary(value, dp) {\n    return +parseFloat(value).toFixed(dp);\n  }\n\n  const handleSave = (item, image) => {\n    item.price = parseFloat(item.price.trim().replace(\" \", \"\"));\n    item.price = toFixedIfNecessary(item.price, 2);\n    item.image = image; // base.addProduct(item, props);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"screen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"screen__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addBoard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"multipleImages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"multipleImages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MultiImageInput, {\n    allowCrop: false,\n    max: 6,\n    images: image,\n    setImages: setImage,\n    theme: {\n      margin: \"0\",\n      background: \"unset\",\n      outlineColor: \"#262a33\",\n      textColor: \"rgba(255,255,255,0.6)\",\n      buttonColor: \"#ff0e1f\",\n      modalColor: \"#ffffff\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      text: \"\",\n      title: \"\",\n      price: \"\",\n      category: \"INNE\"\n    },\n    onSubmit: values => handleSave(values, image),\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, ({}) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AddInputBox, {\n    className: \"addBoard__title\",\n    name: \"title\",\n    placeholder: \"Nazwa\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(AddTextBox, {\n    className: \"addBoard__text\",\n    name: \"text\",\n    placeholder: \"Opis...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addBoard__details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(AddInputBox, {\n    label: \"CENA\",\n    placeholder: \"cena\",\n    name: \"price\",\n    id: \"price\",\n    className: \"addBoard__details--price\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 37\n    }\n  }, categories && /*#__PURE__*/React.createElement(AddSelectBox, {\n    label: \"KATEGORIA\",\n    arr: categories,\n    id: \"category\",\n    name: \"categories\",\n    className: \"addBoard__details--category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 45\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addBoard__buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(AddSubmitButton, {\n    className: \"actionBtn\",\n    title: \"OPUBLIKUJ\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 37\n    }\n  })))))));\n};\n\n_s(AddProduct, \"FAZKW2+T4ORDrmijBZhVJ2gGhNo=\");\n\n_c = AddProduct;\nexport default AddProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddProduct\");","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/app/components/addProduct.jsx"],"names":["React","useState","useEffect","base","catBase","Formik","Yup","AddTextBox","AddInputBox","AddSelectBox","AddSubmitButton","MultiImageInput","validationSchema","object","shape","title","string","required","min","typeError","max","label","text","price","number","test","value","match","category","AddProduct","props","image","setImage","categories","setCategories","loadData","result","get","data","toFixedIfNecessary","dp","parseFloat","toFixed","handleSave","item","trim","replace","margin","background","outlineColor","textColor","buttonColor","modalColor","values"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport * as base from \"./common/base\";\r\nimport * as catBase from \"../../api/categories\";\r\n\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport AddTextBox from \"./common/form/addTextBox\";\r\nimport AddInputBox from \"./common/form/addInputBox\";\r\nimport AddSelectBox from \"./common/form/addSelectBox\";\r\nimport AddSubmitButton from \"./common/form/submitButton\";\r\nimport MultiImageInput from \"react-multiple-image-input\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    title: Yup.string()\r\n        .required(\"Nazwa jest wymagana.\")\r\n        .min(3)\r\n        .typeError(\"Nieprawidłowa wartość.\")\r\n        .max(120)\r\n        .label(\"Nazwa\"),\r\n    text: Yup.string().max(6000),\r\n    price: Yup.number()\r\n        .typeError(\"Nieprawidłowa wartość.\")\r\n        .max(9000000)\r\n        .test(\"is-decimal\", \"invalid decimal\", (value) =>\r\n            (value + \"\").match(/d*/)\r\n        ),\r\n    category: Yup.string().required().max(20),\r\n});\r\n\r\nconst AddProduct = (props) => {\r\n    const [image, setImage] = useState([]);\r\n    const [categories, setCategories] = useState(null);\r\n\r\n    useEffect(() => {\r\n        props.title(\"sprzedaj\");\r\n        loadData();\r\n    }, []);\r\n\r\n    const loadData = async () => {\r\n        const result = await catBase.get();\r\n        setCategories(result.data);\r\n    };\r\n\r\n    function toFixedIfNecessary(value, dp) {\r\n        return +parseFloat(value).toFixed(dp);\r\n    }\r\n\r\n    const handleSave = (item, image) => {\r\n        item.price = parseFloat(item.price.trim().replace(\" \", \"\"));\r\n        item.price = toFixedIfNecessary(item.price, 2);\r\n        item.image = image;\r\n        // base.addProduct(item, props);\r\n    };\r\n\r\n    return (\r\n        <div className=\"screen\">\r\n            <div className=\"screen__container\">\r\n                <div className=\"addBoard\">\r\n                    <div className=\"multipleImages\"></div>\r\n                    <div className=\"multipleImages\">\r\n                        <MultiImageInput\r\n                            allowCrop={false}\r\n                            max={6}\r\n                            images={image}\r\n                            setImages={setImage}\r\n                            theme={{\r\n                                margin: \"0\",\r\n                                background: \"unset\",\r\n                                outlineColor: \"#262a33\",\r\n                                textColor: \"rgba(255,255,255,0.6)\",\r\n                                buttonColor: \"#ff0e1f\",\r\n                                modalColor: \"#ffffff\",\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <Formik\r\n                        initialValues={{\r\n                            text: \"\",\r\n                            title: \"\",\r\n                            price: \"\",\r\n                            category: \"INNE\",\r\n                        }}\r\n                        onSubmit={(values) => handleSave(values, image)}\r\n                        validationSchema={validationSchema}\r\n                    >\r\n                        {({}) => (\r\n                            <>\r\n                                <AddInputBox\r\n                                    className=\"addBoard__title\"\r\n                                    name=\"title\"\r\n                                    placeholder=\"Nazwa\"\r\n                                />\r\n\r\n                                <AddTextBox\r\n                                    className=\"addBoard__text\"\r\n                                    name=\"text\"\r\n                                    placeholder=\"Opis...\"\r\n                                />\r\n\r\n                                <div className=\"addBoard__details\">\r\n                                    <div>\r\n                                        <AddInputBox\r\n                                            label=\"CENA\"\r\n                                            placeholder=\"cena\"\r\n                                            name=\"price\"\r\n                                            id=\"price\"\r\n                                            className=\"addBoard__details--price\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        {categories && (\r\n                                            <AddSelectBox\r\n                                                label=\"KATEGORIA\"\r\n                                                arr={categories}\r\n                                                id=\"category\"\r\n                                                name=\"categories\"\r\n                                                className=\"addBoard__details--category\"\r\n                                            />\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"addBoard__buttons\">\r\n                                    <AddSubmitButton\r\n                                        className=\"actionBtn\"\r\n                                        title=\"OPUBLIKUJ\"\r\n                                    />\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddProduct;\r\n"]},"metadata":{},"sourceType":"module"}