{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\dev\\\\TESTY\\\\TEST NATIVE\\\\bazar\\\\src\\\\app\\\\components\\\\user\\\\register.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { pick } from \"lodash\";\nimport { Formik } from \"formik\";\nimport config from \"../../config/config.json\";\nimport { validationSchema } from \"./models/register\";\nimport * as Yup from \"yup\";\nimport AddInputBox from \"../common/form/addInputBox.jsx\";\nimport AddSubmitButton from \"../common/form/submitButton.jsx\";\nimport * as userBase from \"../../../services/users\";\nimport Spinner from \"../common/spinner\";\n\nconst Register = props => {\n  _s();\n\n  const {\n    title\n  } = props;\n  const [load, setLoad] = useState(false);\n  const [error, setError] = useState(null);\n  const users = [];\n  const emails = [];\n  userBase.get().then(res => checkUsers(res.data));\n\n  const checkUsers = res => {\n    try {\n      res.forEach(user => {\n        users.push(user.login);\n        emails.push(user.email);\n      });\n      const validationSchema = Yup.object().shape({\n        email: Yup.string().trim().required(\"Podaj email.\").label(\"Email\").email(),\n        login: Yup.string().trim().required(\"Podaj nazwe.\").min(5).max(120).label(\"Login\"),\n        password: Yup.string().min(6, \"Password must be at least 6 characters\").required(\"Password is required\"),\n        confirmPassword: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Passwords must match\").required(\"Confirm Password is required\")\n      });\n      console.log(users, emails, validationSchema);\n    } catch (ex) {}\n  };\n\n  useEffect(() => {\n    title(config.headers.register);\n  }, []);\n\n  const checkUser = () => {};\n\n  const checEmail = () => {};\n\n  const handleRegister = async user => {\n    setLoad(true);\n    user.email = user.email.trim().toLowerCase();\n    user.login = user.login.trim();\n    user = pick(user, [\"login\", \"email\", \"password\"]);\n    const response = await userBase.add(user);\n\n    if (response.ok) {\n      localStorage.setItem(\"token\", response.headers[\"x-auth-token\"]);\n      window.location = \"/login\";\n    } else setLoad(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"screen\",\n    children: [load && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: \"\",\n        login: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n      },\n      onSubmit: values => handleRegister(values),\n      validationSchema: validationSchema,\n      children: ({}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"login\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"login__buttons\",\n            children: [/*#__PURE__*/_jsxDEV(AddInputBox, {\n              name: \"email\",\n              label: config.info.email,\n              placeholder: \"Email...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(AddInputBox, {\n              label: config.info.login,\n              name: \"login\",\n              placeholder: \"Login...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(AddInputBox, {\n              label: config.info.password,\n              name: \"password\",\n              type: \"password\",\n              placeholder: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(AddInputBox, {\n              label: config.info.password,\n              name: \"confirmPassword\",\n              type: \"password\",\n              placeholder: \"Confirm password...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(AddSubmitButton, {\n            className: \"actionBtn\",\n            title: config.actions.register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"Wb37WST+1GWDSvFE9TEAZDkglWw=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/app/components/user/register.jsx"],"names":["React","useEffect","useState","pick","Formik","config","validationSchema","Yup","AddInputBox","AddSubmitButton","userBase","Spinner","Register","props","title","load","setLoad","error","setError","users","emails","get","then","res","checkUsers","data","forEach","user","push","login","email","object","shape","string","trim","required","label","min","max","password","confirmPassword","oneOf","ref","console","log","ex","headers","register","checkUser","checEmail","handleRegister","toLowerCase","response","add","ok","localStorage","setItem","window","location","values","info","actions"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { pick } from \"lodash\";\r\nimport { Formik } from \"formik\";\r\nimport config from \"../../config/config.json\";\r\nimport { validationSchema } from \"./models/register\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport AddInputBox from \"../common/form/addInputBox.jsx\";\r\nimport AddSubmitButton from \"../common/form/submitButton.jsx\";\r\n\r\nimport * as userBase from \"../../../services/users\";\r\nimport Spinner from \"../common/spinner\";\r\n\r\nconst Register = (props) => {\r\n    const { title } = props;\r\n    const [load, setLoad] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const users = [];\r\n    const emails = [];\r\n    userBase.get().then((res) => checkUsers(res.data));\r\n\r\n    const checkUsers = (res) => {\r\n        try {\r\n            res.forEach((user) => {\r\n                users.push(user.login);\r\n                emails.push(user.email);\r\n            });\r\n\r\n            const validationSchema = Yup.object().shape({\r\n                email: Yup.string()\r\n                    .trim()\r\n                    .required(\"Podaj email.\")\r\n                    .label(\"Email\")\r\n                    .email(),\r\n                login: Yup.string()\r\n                    .trim()\r\n                    .required(\"Podaj nazwe.\")\r\n                    .min(5)\r\n                    .max(120)\r\n                    .label(\"Login\"),\r\n                password: Yup.string()\r\n                    .min(6, \"Password must be at least 6 characters\")\r\n                    .required(\"Password is required\"),\r\n                confirmPassword: Yup.string()\r\n                    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n                    .required(\"Confirm Password is required\"),\r\n            });\r\n\r\n            console.log(users, emails, validationSchema);\r\n        } catch (ex) {}\r\n    };\r\n\r\n    useEffect(() => {\r\n        title(config.headers.register);\r\n    }, []);\r\n\r\n    const checkUser = () => {};\r\n    const checEmail = () => {};\r\n\r\n    const handleRegister = async (user) => {\r\n        setLoad(true);\r\n\r\n        user.email = user.email.trim().toLowerCase();\r\n        user.login = user.login.trim();\r\n\r\n        user = pick(user, [\"login\", \"email\", \"password\"]);\r\n        const response = await userBase.add(user);\r\n\r\n        if (response.ok) {\r\n            localStorage.setItem(\"token\", response.headers[\"x-auth-token\"]);\r\n            window.location = \"/login\";\r\n        } else setLoad(false);\r\n    };\r\n\r\n    return (\r\n        <main className=\"screen\">\r\n            {load && <Spinner />}\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    email: \"\",\r\n                    login: \"\",\r\n                    password: \"\",\r\n                    confirmPassword: \"\",\r\n                }}\r\n                onSubmit={(values) => handleRegister(values)}\r\n                validationSchema={validationSchema}\r\n            >\r\n                {({}) => (\r\n                    <>\r\n                        <div className=\"login\">\r\n                            <div className=\"login__buttons\">\r\n                                <AddInputBox\r\n                                    name=\"email\"\r\n                                    label={config.info.email}\r\n                                    placeholder=\"Email...\"\r\n                                />\r\n\r\n                                <AddInputBox\r\n                                    label={config.info.login}\r\n                                    name=\"login\"\r\n                                    placeholder=\"Login...\"\r\n                                />\r\n                                <AddInputBox\r\n                                    label={config.info.password}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                />\r\n                                <AddInputBox\r\n                                    label={config.info.password}\r\n                                    name=\"confirmPassword\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Confirm password...\"\r\n                                />\r\n                            </div>\r\n\r\n                            <AddSubmitButton\r\n                                className=\"actionBtn\"\r\n                                title={config.actions.register}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}