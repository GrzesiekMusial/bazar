{"ast":null,"code":"import * as noticeBase from \"../services/notices\";\nimport * as productBase from \"../services/products\";\nimport * as catBase from \"../services/categories\";\n\nconst getOne = async (id, base, setData = null, setImage = null) => {\n  if (id) {\n    const response = await base.getOne(id);\n    if (!response.ok) throw Error;\n    if (!setData) return response.data;\n    setData(response.data);\n    if (setImage) setImage(response.data.images);\n  }\n\n  return true;\n};\n\nconst getOneNotice = async (id, setData, setImage) => {\n  return await getOne(id, noticeBase, setData, setImage);\n};\n\nconst getOneProduct = async (id, setData, setImage) => {\n  return await getOne(id, productBase, setData, setImage);\n};\n\nconst getNotices = async (setData = null) => {\n  const notices = await noticeBase.get();\n  if (!Array.isArray(notices.data)) throw Error;\n  if (setData) return setData(notices.data);\n  return notices.data;\n};\n\nconst getProducts = async (setData = null) => {\n  const products = await productBase.get();\n  if (!Array.isArray(products.data)) throw Error;\n  if (setData) return setData(products.data);\n  return products.data;\n};\n\nconst getCategories = async (withAll = false, setData = false) => {\n  const categories = await catBase.get();\n  if (!Array.isArray(categories.data)) throw Error;\n  const result = withAll ? [{\n    _id: \"0\",\n    name: \"wszystkie\"\n  }, ...categories.data] : [...categories.data];\n  if (setData) return setData(result);\n  return result;\n};\n\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories };","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/methods/load.js"],"names":["noticeBase","productBase","catBase","getOne","id","base","setData","setImage","response","ok","Error","data","images","getOneNotice","getOneProduct","getNotices","notices","get","Array","isArray","getProducts","products","getCategories","withAll","categories","result","_id","name"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,qBAA5B;AACA,OAAO,KAAKC,WAAZ,MAA6B,sBAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;;AAEA,MAAMC,MAAM,GAAG,OAAOC,EAAP,EAAWC,IAAX,EAAiBC,OAAO,GAAG,IAA3B,EAAiCC,QAAQ,GAAG,IAA5C,KAAqD;AAChE,MAAIH,EAAJ,EAAQ;AACJ,UAAMI,QAAQ,GAAG,MAAMH,IAAI,CAACF,MAAL,CAAYC,EAAZ,CAAvB;AACA,QAAI,CAACI,QAAQ,CAACC,EAAd,EAAkB,MAAMC,KAAN;AAClB,QAAI,CAACJ,OAAL,EAAc,OAAOE,QAAQ,CAACG,IAAhB;AACdL,IAAAA,OAAO,CAACE,QAAQ,CAACG,IAAV,CAAP;AACA,QAAIJ,QAAJ,EAAcA,QAAQ,CAACC,QAAQ,CAACG,IAAT,CAAcC,MAAf,CAAR;AACjB;;AACD,SAAO,IAAP;AACH,CATD;;AAWA,MAAMC,YAAY,GAAG,OAAOT,EAAP,EAAWE,OAAX,EAAoBC,QAApB,KAAiC;AAClD,SAAO,MAAMJ,MAAM,CAACC,EAAD,EAAKJ,UAAL,EAAiBM,OAAjB,EAA0BC,QAA1B,CAAnB;AACH,CAFD;;AAIA,MAAMO,aAAa,GAAG,OAAOV,EAAP,EAAWE,OAAX,EAAoBC,QAApB,KAAiC;AACnD,SAAO,MAAMJ,MAAM,CAACC,EAAD,EAAKH,WAAL,EAAkBK,OAAlB,EAA2BC,QAA3B,CAAnB;AACH,CAFD;;AAIA,MAAMQ,UAAU,GAAG,OAAOT,OAAO,GAAG,IAAjB,KAA0B;AACzC,QAAMU,OAAO,GAAG,MAAMhB,UAAU,CAACiB,GAAX,EAAtB;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,OAAO,CAACL,IAAtB,CAAL,EAAkC,MAAMD,KAAN;AAClC,MAAIJ,OAAJ,EAAa,OAAOA,OAAO,CAACU,OAAO,CAACL,IAAT,CAAd;AACb,SAAOK,OAAO,CAACL,IAAf;AACH,CALD;;AAOA,MAAMS,WAAW,GAAG,OAAOd,OAAO,GAAG,IAAjB,KAA0B;AAC1C,QAAMe,QAAQ,GAAG,MAAMpB,WAAW,CAACgB,GAAZ,EAAvB;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcE,QAAQ,CAACV,IAAvB,CAAL,EAAmC,MAAMD,KAAN;AACnC,MAAIJ,OAAJ,EAAa,OAAOA,OAAO,CAACe,QAAQ,CAACV,IAAV,CAAd;AACb,SAAOU,QAAQ,CAACV,IAAhB;AACH,CALD;;AAOA,MAAMW,aAAa,GAAG,OAAOC,OAAO,GAAG,KAAjB,EAAwBjB,OAAO,GAAG,KAAlC,KAA4C;AAC9D,QAAMkB,UAAU,GAAG,MAAMtB,OAAO,CAACe,GAAR,EAAzB;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcK,UAAU,CAACb,IAAzB,CAAL,EAAqC,MAAMD,KAAN;AACrC,QAAMe,MAAM,GAAGF,OAAO,GAChB,CAAC;AAAEG,IAAAA,GAAG,EAAE,GAAP;AAAYC,IAAAA,IAAI,EAAE;AAAlB,GAAD,EAAkC,GAAGH,UAAU,CAACb,IAAhD,CADgB,GAEhB,CAAC,GAAGa,UAAU,CAACb,IAAf,CAFN;AAIA,MAAIL,OAAJ,EAAa,OAAOA,OAAO,CAACmB,MAAD,CAAd;AACb,SAAOA,MAAP;AACH,CATD;;AAWA,SAASZ,YAAT,EAAuBC,aAAvB,EAAsCC,UAAtC,EAAkDK,WAAlD,EAA+DE,aAA/D","sourcesContent":["import * as noticeBase from \"../services/notices\";\r\nimport * as productBase from \"../services/products\";\r\nimport * as catBase from \"../services/categories\";\r\n\r\nconst getOne = async (id, base, setData = null, setImage = null) => {\r\n    if (id) {\r\n        const response = await base.getOne(id);\r\n        if (!response.ok) throw Error;\r\n        if (!setData) return response.data;\r\n        setData(response.data);\r\n        if (setImage) setImage(response.data.images);\r\n    }\r\n    return true;\r\n};\r\n\r\nconst getOneNotice = async (id, setData, setImage) => {\r\n    return await getOne(id, noticeBase, setData, setImage);\r\n};\r\n\r\nconst getOneProduct = async (id, setData, setImage) => {\r\n    return await getOne(id, productBase, setData, setImage);\r\n};\r\n\r\nconst getNotices = async (setData = null) => {\r\n    const notices = await noticeBase.get();\r\n    if (!Array.isArray(notices.data)) throw Error;\r\n    if (setData) return setData(notices.data);\r\n    return notices.data;\r\n};\r\n\r\nconst getProducts = async (setData = null) => {\r\n    const products = await productBase.get();\r\n    if (!Array.isArray(products.data)) throw Error;\r\n    if (setData) return setData(products.data);\r\n    return products.data;\r\n};\r\n\r\nconst getCategories = async (withAll = false, setData = false) => {\r\n    const categories = await catBase.get();\r\n    if (!Array.isArray(categories.data)) throw Error;\r\n    const result = withAll\r\n        ? [{ _id: \"0\", name: \"wszystkie\" }, ...categories.data]\r\n        : [...categories.data];\r\n\r\n    if (setData) return setData(result);\r\n    return result;\r\n};\r\n\r\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories };\r\n"]},"metadata":{},"sourceType":"module"}