{"ast":null,"code":"import * as noticesBase from \"../services/notices\";\nimport * as productsBase from \"../services/products\";\nimport * as categoriesBase from \"../services/categories\";\nimport { cubby } from \"./cubby\";\n\nconst checkBase = async (data, base) => {\n  const maxTime = 600000;\n\n  if (!cubby.data || cubby.time - Date.now() > maxTime) {\n    console.log(\"pobieram\");\n    cubby.time = Date.now();\n    const result = await base.get();\n    let final;\n    final = cubby.data = result.data;\n    return final;\n  } else return cubby.data;\n};\n\nconst getOne = async (id, base, setData = null, setImage = null) => {\n  if (id) {\n    const response = await base.getOne(id);\n    if (!response.ok) throw Error;\n    if (!setData) return response.data;\n    setData(response.data);\n    if (setImage) setImage(response.cubby.images);\n  }\n\n  return true;\n};\n\nconst getOneNotice = async (id, setData, setImage) => {\n  return await getOne(id, cubby.notices.data, setData, setImage);\n};\n\nconst getOneProduct = async (id, setData, setImage) => {\n  return await getOne(id, cubby.products.data, setData, setImage);\n};\n\nconst getNotices = async (setData = null) => {\n  const notices = await checkBase(cubby.notices, noticesBase);\n  if (setData) return setData(notices);\n  return notices;\n};\n\nconst getProducts = async (setData = null) => {\n  const products = await checkBase(cubby.products, productsBase);\n  if (setData) return setData(products);\n  return products;\n};\n\nconst getCategories = async (withAll = false, setData = false) => {\n  const categories = await checkBase(cubby.categories, categoriesBase);\n  const result = withAll ? [{\n    _id: \"0\",\n    name: \"wszystkie\"\n  }, ...categories] : [...categories];\n  if (setData) return setData(result);\n  return result;\n};\n\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories };","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/methods/load.js"],"names":["noticesBase","productsBase","categoriesBase","cubby","checkBase","data","base","maxTime","time","Date","now","console","log","result","get","final","getOne","id","setData","setImage","response","ok","Error","images","getOneNotice","notices","getOneProduct","products","getNotices","getProducts","getCategories","withAll","categories","_id","name"],"mappings":"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","sourcesContent":["import * as noticesBase from \"../services/notices\";\r\nimport * as productsBase from \"../services/products\";\r\nimport * as categoriesBase from \"../services/categories\";\r\nimport { cubby } from \"./cubby\";\r\n\r\nconst checkBase = async (data, base) => {\r\n    const maxTime = 600000;\r\n    if (!cubby.data || cubby.time - Date.now() > maxTime) {\r\n        console.log(\"pobieram\");\r\n        cubby.time = Date.now();\r\n        const result = await base.get();\r\n        let final;\r\n        final = cubby.data = result.data;\r\n        return final;\r\n    } else return cubby.data;\r\n};\r\n\r\nconst getOne = async (id, base, setData = null, setImage = null) => {\r\n    if (id) {\r\n        const response = await base.getOne(id);\r\n        if (!response.ok) throw Error;\r\n        if (!setData) return response.data;\r\n        setData(response.data);\r\n        if (setImage) setImage(response.cubby.images);\r\n    }\r\n    return true;\r\n};\r\n\r\nconst getOneNotice = async (id, setData, setImage) => {\r\n    return await getOne(id, cubby.notices.data, setData, setImage);\r\n};\r\n\r\nconst getOneProduct = async (id, setData, setImage) => {\r\n    return await getOne(id, cubby.products.data, setData, setImage);\r\n};\r\n\r\nconst getNotices = async (setData = null) => {\r\n    const notices = await checkBase(cubby.notices, noticesBase);\r\n    if (setData) return setData(notices);\r\n    return notices;\r\n};\r\n\r\nconst getProducts = async (setData = null) => {\r\n    const products = await checkBase(cubby.products, productsBase);\r\n    if (setData) return setData(products);\r\n    return products;\r\n};\r\n\r\nconst getCategories = async (withAll = false, setData = false) => {\r\n    const categories = await checkBase(cubby.categories, categoriesBase);\r\n    const result = withAll\r\n        ? [{ _id: \"0\", name: \"wszystkie\" }, ...categories]\r\n        : [...categories];\r\n\r\n    if (setData) return setData(result);\r\n    return result;\r\n};\r\n\r\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories };\r\n"]},"metadata":{},"sourceType":"module"}