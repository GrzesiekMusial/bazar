{"ast":null,"code":"import * as catBase from \"../api/categories\";\nimport * as noticeBase from \"../api/notices\";\nimport * as productBase from \"../api/products\";\nimport * as imageBase from \"../api/images\";\nimport { toast } from \"react-toastify\";\n\nconst getOne = async (id, base, setData, setImage) => {\n  if (id) {\n    const response = await base.getOne(id);\n    if (!response.ok) toast.error(\"Error occured on saving!\");\n    setData(response.data);\n    if (setImage) setImage(response.data.images);\n  }\n\n  return true;\n};\n\nconst getOneNotice = async (id, setData, setImage) => {\n  return await getOne(id, noticeBase, setData, setImage);\n};\n\nconst getOneProduct = async (id, setData, setImage) => {\n  return await getOne(id, productBase, setData, setImage);\n};\n\nconst getNotices = async setData => {\n  const notices = await noticeBase.get();\n  if (!Array.isArray(notices.data)) throw toast.error(\"Error occured!\");\n  return setData(notices.data);\n};\n\nconst getProducts = async setData => {\n  const products = await productBase.get();\n  if (!Array.isArray(products.data)) throw toast.error(\"Error occured!\");\n  return setData(products.data);\n};\n\nconst getCategories = async setData => {\n  const categories = await catBase.get();\n  if (!Array.isArray(categories.data)) throw toast.error(\"Error occured!\");\n  return setData([{\n    _id: \"0\",\n    name: \"wszystkie\"\n  }, ...categories.data]);\n};\n\nconst noticeDelete = async card => {\n  try {\n    card.images.forEach(img => imageBase.remove(img));\n    const result = await noticeBase.remove(card._id);\n    if (result.ok) return result.data;else toast.error(\"Error when delete. \" + result.originalError.message);\n  } catch (ex) {\n    if (ex.response && ex.response.status === 404) toast.error(\"This product has already been deleted.\");else throw toast.error(\"Error when delete.\");\n  }\n};\n\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories, noticeDelete };","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/methods/data.js"],"names":["catBase","noticeBase","productBase","imageBase","toast","getOne","id","base","setData","setImage","response","ok","error","data","images","getOneNotice","getOneProduct","getNotices","notices","get","Array","isArray","getProducts","products","getCategories","categories","_id","name","noticeDelete","card","forEach","img","remove","result","originalError","message","ex","status"],"mappings":"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","sourcesContent":["import * as catBase from \"../api/categories\";\r\nimport * as noticeBase from \"../api/notices\";\r\nimport * as productBase from \"../api/products\";\r\nimport * as imageBase from \"../api/images\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst getOne = async (id, base, setData, setImage) => {\r\n    if (id) {\r\n        const response = await base.getOne(id);\r\n        if (!response.ok) toast.error(\"Error occured on saving!\");\r\n        setData(response.data);\r\n        if (setImage) setImage(response.data.images);\r\n    }\r\n    return true;\r\n};\r\n\r\nconst getOneNotice = async (id, setData, setImage) => {\r\n    return await getOne(id, noticeBase, setData, setImage);\r\n};\r\n\r\nconst getOneProduct = async (id, setData, setImage) => {\r\n    return await getOne(id, productBase, setData, setImage);\r\n};\r\n\r\nconst getNotices = async (setData) => {\r\n    const notices = await noticeBase.get();\r\n    if (!Array.isArray(notices.data)) throw toast.error(\"Error occured!\");\r\n    return setData(notices.data);\r\n};\r\n\r\nconst getProducts = async (setData) => {\r\n    const products = await productBase.get();\r\n    if (!Array.isArray(products.data)) throw toast.error(\"Error occured!\");\r\n    return setData(products.data);\r\n};\r\n\r\nconst getCategories = async (setData) => {\r\n    const categories = await catBase.get();\r\n    if (!Array.isArray(categories.data)) throw toast.error(\"Error occured!\");\r\n    return setData([{ _id: \"0\", name: \"wszystkie\" }, ...categories.data]);\r\n};\r\n\r\nconst noticeDelete = async (card) => {\r\n    try {\r\n        card.images.forEach((img) => imageBase.remove(img));\r\n        const result = await noticeBase.remove(card._id);\r\n        if (result.ok) return result.data;\r\n        else toast.error(\"Error when delete. \" + result.originalError.message);\r\n    } catch (ex) {\r\n        if (ex.response && ex.response.status === 404)\r\n            toast.error(\"This product has already been deleted.\");\r\n        else throw toast.error(\"Error when delete.\");\r\n    }\r\n};\r\n\r\nexport {\r\n    getOneNotice,\r\n    getOneProduct,\r\n    getNotices,\r\n    getProducts,\r\n    getCategories,\r\n    noticeDelete,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}