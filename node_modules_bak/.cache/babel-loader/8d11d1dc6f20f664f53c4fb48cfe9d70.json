{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\dev\\\\TESTY\\\\TEST NATIVE\\\\bazar\\\\src\\\\app\\\\components\\\\addProduct.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport * as catBase from \"../../api/categories\";\nimport * as prodBase from \"../../api/products\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport AddTextBox from \"./common/form/addTextBox\";\nimport AddInputBox from \"./common/form/addInputBox\";\nimport AddSelectBox from \"./common/form/addSelectBox\";\nimport AddSubmitButton from \"./common/form/submitButton\";\nimport MultiImageInput from \"react-multiple-image-input\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nconst validationSchema = Yup.object().shape({\n  title: Yup.string().required(\"Nazwa jest wymagana.\").min(3).typeError(\"Nieprawidłowa wartość.\").max(120).label(\"Nazwa\"),\n  text: Yup.string().max(6000),\n  price: Yup.number().typeError(\"Nieprawidłowa wartość.\").max(9000000).test(\"is-decimal\", \"invalid decimal\", value => (value + \"\").match(/d*/)),\n  category: Yup.string().required().max(255)\n});\n\nconst AddProduct = props => {\n  _s();\n\n  const [image, setImage] = useState([]);\n  const [categories, setCategories] = useState(null);\n  const [edit, setEdit] = useState(null);\n\n  const checkEdit = async () => {\n    const edit = props.match.params.id ? await prodBase.product(props.match.params.id) : null;\n    return setEdit(edit);\n  };\n\n  useEffect(() => {\n    props.title(\"sprzedaj\");\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    const result = await catBase.get();\n    if (!Array.isArray(result.data)) return;\n    setCategories(result.data);\n  };\n\n  function toFixedIfNecessary(value, dp) {\n    return +parseFloat(value).toFixed(dp);\n  }\n\n  const handleSave = async (item, image) => {\n    item.price = parseFloat(item.price.trim().replace(\" \", \"\"));\n    item.price = toFixedIfNecessary(item.price, 2);\n    item.price = item.price.toString();\n    const response = await prodBase.add(item);\n    console.log(response.data._id);\n    response.ok ? props.history.push(`/bazar/product/${response.data._id}`) : toast.error(\"Error occured on saving!\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen\",\n    children: categories && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen__container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addBoard\",\n        children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multipleImages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multipleImages\",\n          children: /*#__PURE__*/_jsxDEV(MultiImageInput, {\n            allowCrop: false,\n            max: 6,\n            images: image,\n            setImages: setImage,\n            theme: {\n              margin: \"0\",\n              background: \"unset\",\n              outlineColor: \"#262a33\",\n              textColor: \"rgba(255,255,255,0.6)\",\n              buttonColor: \"#ff0e1f\",\n              modalColor: \"#ffffff\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            text: \"\",\n            title: \"\",\n            price: \"\",\n            category: categories[0]._id\n          },\n          onSubmit: values => handleSave(values, image),\n          validationSchema: validationSchema,\n          children: ({}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(AddInputBox, {\n              className: \"addBoard__title\",\n              name: \"title\",\n              placeholder: \"Nazwa\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(AddTextBox, {\n              className: \"addBoard__text\",\n              name: \"text\",\n              placeholder: \"Opis...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"addBoard__details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(AddInputBox, {\n                  label: \"CENA\",\n                  placeholder: \"cena\",\n                  name: \"price\",\n                  id: \"price\",\n                  className: \"addBoard__details--price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: categories && /*#__PURE__*/_jsxDEV(AddSelectBox, {\n                  label: \"KATEGORIA\",\n                  arr: categories,\n                  id: \"category\",\n                  name: \"category\",\n                  className: \"addBoard__details--category\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"addBoard__buttons\",\n              children: /*#__PURE__*/_jsxDEV(AddSubmitButton, {\n                className: \"actionBtn\",\n                title: \"OPUBLIKUJ\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddProduct, \"yKgTaGwkhmgT4R9oGrA3E9Rx5cU=\");\n\n_c = AddProduct;\nexport default AddProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddProduct\");","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/app/components/addProduct.jsx"],"names":["React","useState","useEffect","catBase","prodBase","Formik","Yup","AddTextBox","AddInputBox","AddSelectBox","AddSubmitButton","MultiImageInput","toast","ToastContainer","validationSchema","object","shape","title","string","required","min","typeError","max","label","text","price","number","test","value","match","category","AddProduct","props","image","setImage","categories","setCategories","edit","setEdit","checkEdit","params","id","product","loadData","result","get","Array","isArray","data","toFixedIfNecessary","dp","parseFloat","toFixed","handleSave","item","trim","replace","toString","response","add","console","log","_id","ok","history","push","error","margin","background","outlineColor","textColor","buttonColor","modalColor","values"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport * as catBase from \"../../api/categories\";\r\nimport * as prodBase from \"../../api/products\";\r\n\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport AddTextBox from \"./common/form/addTextBox\";\r\nimport AddInputBox from \"./common/form/addInputBox\";\r\nimport AddSelectBox from \"./common/form/addSelectBox\";\r\nimport AddSubmitButton from \"./common/form/submitButton\";\r\nimport MultiImageInput from \"react-multiple-image-input\";\r\n\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    title: Yup.string()\r\n        .required(\"Nazwa jest wymagana.\")\r\n        .min(3)\r\n        .typeError(\"Nieprawidłowa wartość.\")\r\n        .max(120)\r\n        .label(\"Nazwa\"),\r\n    text: Yup.string().max(6000),\r\n    price: Yup.number()\r\n        .typeError(\"Nieprawidłowa wartość.\")\r\n        .max(9000000)\r\n        .test(\"is-decimal\", \"invalid decimal\", (value) =>\r\n            (value + \"\").match(/d*/)\r\n        ),\r\n    category: Yup.string().required().max(255),\r\n});\r\n\r\nconst AddProduct = (props) => {\r\n    const [image, setImage] = useState([]);\r\n    const [categories, setCategories] = useState(null);\r\n    const [edit, setEdit] = useState(null);\r\n\r\n    const checkEdit = async () => {\r\n        const edit = props.match.params.id\r\n            ? await prodBase.product(props.match.params.id)\r\n            : null;\r\n\r\n        return setEdit(edit);\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.title(\"sprzedaj\");\r\n        loadData();\r\n    }, []);\r\n\r\n    const loadData = async () => {\r\n        const result = await catBase.get();\r\n\r\n        if (!Array.isArray(result.data)) return;\r\n        setCategories(result.data);\r\n    };\r\n\r\n    function toFixedIfNecessary(value, dp) {\r\n        return +parseFloat(value).toFixed(dp);\r\n    }\r\n\r\n    const handleSave = async (item, image) => {\r\n        item.price = parseFloat(item.price.trim().replace(\" \", \"\"));\r\n        item.price = toFixedIfNecessary(item.price, 2);\r\n        item.price = item.price.toString();\r\n\r\n        const response = await prodBase.add(item);\r\n        console.log(response.data._id);\r\n        response.ok\r\n            ? props.history.push(`/bazar/product/${response.data._id}`)\r\n            : toast.error(\"Error occured on saving!\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"screen\">\r\n            {categories && (\r\n                <div className=\"screen__container\">\r\n                    <div className=\"addBoard\">\r\n                        <ToastContainer />\r\n                        <div className=\"multipleImages\"></div>\r\n                        <div className=\"multipleImages\">\r\n                            <MultiImageInput\r\n                                allowCrop={false}\r\n                                max={6}\r\n                                images={image}\r\n                                setImages={setImage}\r\n                                theme={{\r\n                                    margin: \"0\",\r\n                                    background: \"unset\",\r\n                                    outlineColor: \"#262a33\",\r\n                                    textColor: \"rgba(255,255,255,0.6)\",\r\n                                    buttonColor: \"#ff0e1f\",\r\n                                    modalColor: \"#ffffff\",\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <Formik\r\n                            initialValues={{\r\n                                text: \"\",\r\n                                title: \"\",\r\n                                price: \"\",\r\n                                category: categories[0]._id,\r\n                            }}\r\n                            onSubmit={(values) => handleSave(values, image)}\r\n                            validationSchema={validationSchema}\r\n                        >\r\n                            {({}) => (\r\n                                <>\r\n                                    <AddInputBox\r\n                                        className=\"addBoard__title\"\r\n                                        name=\"title\"\r\n                                        placeholder=\"Nazwa\"\r\n                                    />\r\n\r\n                                    <AddTextBox\r\n                                        className=\"addBoard__text\"\r\n                                        name=\"text\"\r\n                                        placeholder=\"Opis...\"\r\n                                    />\r\n\r\n                                    <div className=\"addBoard__details\">\r\n                                        <div>\r\n                                            <AddInputBox\r\n                                                label=\"CENA\"\r\n                                                placeholder=\"cena\"\r\n                                                name=\"price\"\r\n                                                id=\"price\"\r\n                                                className=\"addBoard__details--price\"\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            {categories && (\r\n                                                <AddSelectBox\r\n                                                    label=\"KATEGORIA\"\r\n                                                    arr={categories}\r\n                                                    id=\"category\"\r\n                                                    name=\"category\"\r\n                                                    className=\"addBoard__details--category\"\r\n                                                />\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"addBoard__buttons\">\r\n                                        <AddSubmitButton\r\n                                            className=\"actionBtn\"\r\n                                            title=\"OPUBLIKUJ\"\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                        </Formik>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddProduct;\r\n"]},"metadata":{},"sourceType":"module"}