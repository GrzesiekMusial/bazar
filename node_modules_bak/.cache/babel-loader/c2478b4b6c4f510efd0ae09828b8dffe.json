{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\dev\\\\TESTY\\\\TEST NATIVE\\\\bazar\\\\src\\\\app\\\\components\\\\user\\\\register.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { pick } from \"lodash\";\nimport { Formik } from \"formik\";\nimport config from \"../../config/config.json\";\nimport { validationSchema } from \"./models/register\";\nimport AddInputBox from \"../common/form/addInputBox.jsx\";\nimport AddSubmitButton from \"../common/form/submitButton.jsx\";\nimport * as userBase from \"../../../services/users\";\nimport Spinner from \"../common/spinner\";\n\nconst Register = props => {\n  _s();\n\n  const {\n    title\n  } = props;\n  const [load, setLoad] = useState(false);\n  const users = [];\n  const emails = [];\n  userBase.get().then(res => checkUsers(res));\n\n  const checkUsers = res => {\n    res.forEach(user => {\n      users.push(user.login);\n      emails.push(user.email);\n    });\n    console.log(users, emails);\n  };\n\n  useEffect(() => {\n    title(config.headers.register);\n  }, []);\n\n  const checkUser = () => {};\n\n  const handleRegister = async user => {\n    setLoad(true);\n    user.email = user.email.trim().toLowerCase();\n    user.login = user.login.trim();\n    user = pick(user, [\"login\", \"email\", \"password\"]);\n    const response = await userBase.add(user);\n\n    if (response.ok) {\n      localStorage.setItem(\"token\", response.headers[\"x-auth-token\"]);\n      window.location = \"/login\";\n    } else setLoad(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"screen\",\n    children: [load && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: \"\",\n        login: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n      },\n      onSubmit: values => handleRegister(values),\n      validationSchema: validationSchema,\n      children: ({}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"login\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"login__buttons\",\n            children: [/*#__PURE__*/_jsxDEV(AddInputBox, {\n              name: \"email\",\n              label: config.info.email,\n              placeholder: \"Email...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(AddInputBox, {\n              label: config.info.login,\n              name: \"login\",\n              placeholder: \"Login...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(AddInputBox, {\n              label: config.info.password,\n              name: \"password\",\n              type: \"password\",\n              placeholder: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(AddInputBox, {\n              label: config.info.password,\n              name: \"confirmPassword\",\n              type: \"password\",\n              placeholder: \"Confirm password...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(AddSubmitButton, {\n            className: \"actionBtn\",\n            title: config.actions.register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"ijzMgfjU450NjE2OuXXNqDmJ21Y=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/app/components/user/register.jsx"],"names":["React","useEffect","useState","pick","Formik","config","validationSchema","AddInputBox","AddSubmitButton","userBase","Spinner","Register","props","title","load","setLoad","users","emails","get","then","res","checkUsers","forEach","user","push","login","email","console","log","headers","register","checkUser","handleRegister","trim","toLowerCase","response","add","ok","localStorage","setItem","window","location","password","confirmPassword","values","info","actions"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { pick } from \"lodash\";\r\nimport { Formik } from \"formik\";\r\nimport config from \"../../config/config.json\";\r\n\r\nimport { validationSchema } from \"./models/register\";\r\n\r\nimport AddInputBox from \"../common/form/addInputBox.jsx\";\r\nimport AddSubmitButton from \"../common/form/submitButton.jsx\";\r\n\r\nimport * as userBase from \"../../../services/users\";\r\nimport Spinner from \"../common/spinner\";\r\n\r\nconst Register = (props) => {\r\n    const { title } = props;\r\n    const [load, setLoad] = useState(false);\r\n\r\n    const users = [];\r\n    const emails = [];\r\n    userBase.get().then((res) => checkUsers(res));\r\n\r\n    const checkUsers = (res) => {\r\n        res.forEach((user) => {\r\n            users.push(user.login);\r\n            emails.push(user.email);\r\n        });\r\n\r\n        console.log(users, emails);\r\n    };\r\n\r\n    useEffect(() => {\r\n        title(config.headers.register);\r\n    }, []);\r\n\r\n    const checkUser = () => {};\r\n\r\n    const handleRegister = async (user) => {\r\n        setLoad(true);\r\n\r\n        user.email = user.email.trim().toLowerCase();\r\n        user.login = user.login.trim();\r\n\r\n        user = pick(user, [\"login\", \"email\", \"password\"]);\r\n        const response = await userBase.add(user);\r\n\r\n        if (response.ok) {\r\n            localStorage.setItem(\"token\", response.headers[\"x-auth-token\"]);\r\n            window.location = \"/login\";\r\n        } else setLoad(false);\r\n    };\r\n\r\n    return (\r\n        <main className=\"screen\">\r\n            {load && <Spinner />}\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    email: \"\",\r\n                    login: \"\",\r\n                    password: \"\",\r\n                    confirmPassword: \"\",\r\n                }}\r\n                onSubmit={(values) => handleRegister(values)}\r\n                validationSchema={validationSchema}\r\n            >\r\n                {({}) => (\r\n                    <>\r\n                        <div className=\"login\">\r\n                            <div className=\"login__buttons\">\r\n                                <AddInputBox\r\n                                    name=\"email\"\r\n                                    label={config.info.email}\r\n                                    placeholder=\"Email...\"\r\n                                />\r\n\r\n                                <AddInputBox\r\n                                    label={config.info.login}\r\n                                    name=\"login\"\r\n                                    placeholder=\"Login...\"\r\n                                />\r\n                                <AddInputBox\r\n                                    label={config.info.password}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                />\r\n                                <AddInputBox\r\n                                    label={config.info.password}\r\n                                    name=\"confirmPassword\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Confirm password...\"\r\n                                />\r\n                            </div>\r\n\r\n                            <AddSubmitButton\r\n                                className=\"actionBtn\"\r\n                                title={config.actions.register}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}