{"ast":null,"code":"import * as noticesBase from \"../services/notices\";\nimport * as productsBase from \"../services/products\";\nimport * as categoriesBase from \"../services/categories\";\nimport { data } from \"./cubby\";\n\nconst checkBase = async (data, base) => {\n  const maxTime = 600000;\n\n  if (!data.data || data.time - Date.now() > maxTime) {\n    console.log(\"pobieram\");\n    data.time = Date.now();\n    const result = await base.get();\n    let final;\n    final = data.data = result.data;\n    return final;\n  } else return data.data;\n};\n\nconst getOne = async (id, base, setData = null, setImage = null) => {\n  if (id) {\n    const response = await base.getOne(id);\n    if (!response.ok) throw Error;\n    if (!setData) return response.data;\n    setData(response.data);\n    if (setImage) setImage(response.data.images);\n  }\n\n  return true;\n};\n\nconst getOneNotice = async (id, setData, setImage) => {\n  return await getOne(id, noticesBase, setData, setImage);\n};\n\nconst getOneProduct = async (id, setData, setImage) => {\n  return await getOne(id, productBase, setData, setImage);\n};\n\nconst getNotices = async (setData = null) => {\n  const notices = await checkBase(data.notices, noticesBase);\n  if (setData) return setData(notices);\n  return notices;\n};\n\nconst getProducts = async (setData = null) => {\n  const products = await checkBase(data.products, productsBase);\n  if (setData) return setData(products);\n  return products;\n};\n\nconst getCategories = async (withAll = false, setData = false) => {\n  const categories = await checkBase(data.categories, categoriesBase);\n  const result = withAll ? [{\n    _id: \"0\",\n    name: \"wszystkie\"\n  }, ...categories] : [...categories];\n  if (setData) return setData(result);\n  return result;\n};\n\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories };","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/methods/load.js"],"names":["noticesBase","productsBase","categoriesBase","data","checkBase","base","maxTime","time","Date","now","console","log","result","get","final","getOne","id","setData","setImage","response","ok","Error","images","getOneNotice","getOneProduct","productBase","getNotices","notices","getProducts","products","getCategories","withAll","categories","_id","name"],"mappings":"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","sourcesContent":["import * as noticesBase from \"../services/notices\";\r\nimport * as productsBase from \"../services/products\";\r\nimport * as categoriesBase from \"../services/categories\";\r\nimport { data } from \"./cubby\";\r\n\r\nconst checkBase = async (data, base) => {\r\n    const maxTime = 600000;\r\n    if (!data.data || data.time - Date.now() > maxTime) {\r\n        console.log(\"pobieram\");\r\n        data.time = Date.now();\r\n        const result = await base.get();\r\n        let final;\r\n        final = data.data = result.data;\r\n        return final;\r\n    } else return data.data;\r\n};\r\n\r\nconst getOne = async (id, base, setData = null, setImage = null) => {\r\n    if (id) {\r\n        const response = await base.getOne(id);\r\n        if (!response.ok) throw Error;\r\n        if (!setData) return response.data;\r\n        setData(response.data);\r\n        if (setImage) setImage(response.data.images);\r\n    }\r\n    return true;\r\n};\r\n\r\nconst getOneNotice = async (id, setData, setImage) => {\r\n    return await getOne(id, noticesBase, setData, setImage);\r\n};\r\n\r\nconst getOneProduct = async (id, setData, setImage) => {\r\n    return await getOne(id, productBase, setData, setImage);\r\n};\r\n\r\nconst getNotices = async (setData = null) => {\r\n    const notices = await checkBase(data.notices, noticesBase);\r\n    if (setData) return setData(notices);\r\n    return notices;\r\n};\r\n\r\nconst getProducts = async (setData = null) => {\r\n    const products = await checkBase(data.products, productsBase);\r\n    if (setData) return setData(products);\r\n    return products;\r\n};\r\n\r\nconst getCategories = async (withAll = false, setData = false) => {\r\n    const categories = await checkBase(data.categories, categoriesBase);\r\n    const result = withAll\r\n        ? [{ _id: \"0\", name: \"wszystkie\" }, ...categories]\r\n        : [...categories];\r\n\r\n    if (setData) return setData(result);\r\n    return result;\r\n};\r\n\r\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories };\r\n"]},"metadata":{},"sourceType":"module"}