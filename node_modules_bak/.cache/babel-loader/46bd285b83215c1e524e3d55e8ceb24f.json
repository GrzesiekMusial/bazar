{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport * as imagesBase from \"../api/images\";\n\nconst imageSave = async (item, edit, image) => {\n  if (!(image.length > 0 && typeof image[0] !== \"string\")) return item.images;\n  if (edit) edit.images.forEach(img => imagesBase.remove(img));\n  const response = await uploadImage(image);\n  if (response.ok) return response.data;else throw toast.error(\"Error occured on saving!\");\n};\n\nconst checkPrice = async price => {\n  try {\n    if (price) {\n      price = price.trim();\n      price = +parseFloat(price).toFixed(2);\n    } else {\n      price = 0;\n    }\n  } catch (e) {}\n\n  setTimeout(console.log(\"ok1\"), 1000);\n};\n\nconst handleSave = async (item, edit, image, base) => {\n  item.price = await checkPrice(item.price);\n  console.log(\"ok2\");\n  item.images = await imageSave(item, edit, image);\n\n  if (edit) {\n    item._id = edit._id;\n    const response = await base.edit(item);\n    if (!response.ok) throw toast.error(\"Error occured on saving!\");\n    return response.data;\n  }\n\n  const response = await base.add(item);\n  if (!response.ok) throw toast.error(\"Error occured on saving!\");\n  return response.data;\n};\n\nconst uploadImage = image => {\n  const form = new FormData();\n  image.forEach(img => form.append(\"image\", img));\n  return imagesBase.add(form);\n};\n\nexport { handleSave };","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/methods/save.js"],"names":["toast","imagesBase","imageSave","item","edit","image","length","images","forEach","img","remove","response","uploadImage","ok","data","error","checkPrice","price","trim","parseFloat","toFixed","e","setTimeout","console","log","handleSave","base","_id","add","form","FormData","append"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAO,KAAKC,UAAZ,MAA4B,eAA5B;;AAEA,MAAMC,SAAS,GAAG,OAAOC,IAAP,EAAaC,IAAb,EAAmBC,KAAnB,KAA6B;AAC3C,MAAI,EAAEA,KAAK,CAACC,MAAN,GAAe,CAAf,IAAoB,OAAOD,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAA1C,CAAJ,EAAyD,OAAOF,IAAI,CAACI,MAAZ;AAEzD,MAAIH,IAAJ,EAAUA,IAAI,CAACG,MAAL,CAAYC,OAAZ,CAAqBC,GAAD,IAASR,UAAU,CAACS,MAAX,CAAkBD,GAAlB,CAA7B;AAEV,QAAME,QAAQ,GAAG,MAAMC,WAAW,CAACP,KAAD,CAAlC;AACA,MAAIM,QAAQ,CAACE,EAAb,EAAiB,OAAOF,QAAQ,CAACG,IAAhB,CAAjB,KACK,MAAMd,KAAK,CAACe,KAAN,CAAY,0BAAZ,CAAN;AACR,CARD;;AAUA,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAiB;AAChC,MAAI;AACA,QAAIA,KAAJ,EAAW;AACPA,MAAAA,KAAK,GAAGA,KAAK,CAACC,IAAN,EAAR;AACAD,MAAAA,KAAK,GAAG,CAACE,UAAU,CAACF,KAAD,CAAV,CAAkBG,OAAlB,CAA0B,CAA1B,CAAT;AACH,KAHD,MAGO;AACHH,MAAAA,KAAK,GAAG,CAAR;AACH;AACJ,GAPD,CAOE,OAAOI,CAAP,EAAU,CAAE;;AACdC,EAAAA,UAAU,CAACC,OAAO,CAACC,GAAR,CAAY,KAAZ,CAAD,EAAqB,IAArB,CAAV;AACH,CAVD;;AAYA,MAAMC,UAAU,GAAG,OAAOtB,IAAP,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BqB,IAA1B,KAAmC;AAClDvB,EAAAA,IAAI,CAACc,KAAL,GAAa,MAAMD,UAAU,CAACb,IAAI,CAACc,KAAN,CAA7B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACArB,EAAAA,IAAI,CAACI,MAAL,GAAc,MAAML,SAAS,CAACC,IAAD,EAAOC,IAAP,EAAaC,KAAb,CAA7B;;AAEA,MAAID,IAAJ,EAAU;AACND,IAAAA,IAAI,CAACwB,GAAL,GAAWvB,IAAI,CAACuB,GAAhB;AACA,UAAMhB,QAAQ,GAAG,MAAMe,IAAI,CAACtB,IAAL,CAAUD,IAAV,CAAvB;AACA,QAAI,CAACQ,QAAQ,CAACE,EAAd,EAAkB,MAAMb,KAAK,CAACe,KAAN,CAAY,0BAAZ,CAAN;AAClB,WAAOJ,QAAQ,CAACG,IAAhB;AACH;;AAED,QAAMH,QAAQ,GAAG,MAAMe,IAAI,CAACE,GAAL,CAASzB,IAAT,CAAvB;AACA,MAAI,CAACQ,QAAQ,CAACE,EAAd,EAAkB,MAAMb,KAAK,CAACe,KAAN,CAAY,0BAAZ,CAAN;AAClB,SAAOJ,QAAQ,CAACG,IAAhB;AACH,CAfD;;AAiBA,MAAMF,WAAW,GAAIP,KAAD,IAAW;AAC3B,QAAMwB,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAzB,EAAAA,KAAK,CAACG,OAAN,CAAeC,GAAD,IAASoB,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqBtB,GAArB,CAAvB;AACA,SAAOR,UAAU,CAAC2B,GAAX,CAAeC,IAAf,CAAP;AACH,CAJD;;AAMA,SAASJ,UAAT","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport * as imagesBase from \"../api/images\";\r\n\r\nconst imageSave = async (item, edit, image) => {\r\n    if (!(image.length > 0 && typeof image[0] !== \"string\")) return item.images;\r\n\r\n    if (edit) edit.images.forEach((img) => imagesBase.remove(img));\r\n\r\n    const response = await uploadImage(image);\r\n    if (response.ok) return response.data;\r\n    else throw toast.error(\"Error occured on saving!\");\r\n};\r\n\r\nconst checkPrice = async (price) => {\r\n    try {\r\n        if (price) {\r\n            price = price.trim();\r\n            price = +parseFloat(price).toFixed(2);\r\n        } else {\r\n            price = 0;\r\n        }\r\n    } catch (e) {}\r\n    setTimeout(console.log(\"ok1\"), 1000);\r\n};\r\n\r\nconst handleSave = async (item, edit, image, base) => {\r\n    item.price = await checkPrice(item.price);\r\n    console.log(\"ok2\");\r\n    item.images = await imageSave(item, edit, image);\r\n\r\n    if (edit) {\r\n        item._id = edit._id;\r\n        const response = await base.edit(item);\r\n        if (!response.ok) throw toast.error(\"Error occured on saving!\");\r\n        return response.data;\r\n    }\r\n\r\n    const response = await base.add(item);\r\n    if (!response.ok) throw toast.error(\"Error occured on saving!\");\r\n    return response.data;\r\n};\r\n\r\nconst uploadImage = (image) => {\r\n    const form = new FormData();\r\n    image.forEach((img) => form.append(\"image\", img));\r\n    return imagesBase.add(form);\r\n};\r\n\r\nexport { handleSave };\r\n"]},"metadata":{},"sourceType":"module"}