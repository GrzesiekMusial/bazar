{"ast":null,"code":"import * as noticeBase from \"../services/notices\";\nimport * as productBase from \"../services/products\";\nimport * as categoriesBase from \"../services/categories\";\nconst data = {\n  products: {\n    time: 0,\n    data: null\n  },\n  notices: {\n    time: 0,\n    data: null\n  },\n  categories: {\n    time: 0,\n    data: null\n  }\n};\n\nconst getOne = async (id, base, setData = null, setImage = null) => {\n  if (id) {\n    const response = await base.getOne(id);\n    if (!response.ok) throw Error;\n    if (!setData) return response.data;\n    setData(response.data);\n    if (setImage) setImage(response.data.images);\n  }\n\n  return true;\n};\n\nconst getOneNotice = async (id, setData, setImage) => {\n  return await getOne(id, noticeBase, setData, setImage);\n};\n\nconst getOneProduct = async (id, setData, setImage) => {\n  return await getOne(id, productBase, setData, setImage);\n};\n\nconst getNotices = async (setData = null) => {\n  const notices = await noticeBase.get();\n  if (!Array.isArray(notices.data)) throw Error;\n  if (setData) return setData(notices.data);\n  return notices.data;\n};\n\nconst checkBase = async (data, base) => {\n  const maxTime = 600000;\n\n  if (!data.data || data.time - Date.now() > maxTime) {\n    console.log(\"pobieram\");\n    data.time = Date.now();\n    const result = await base.get();\n    let final;\n    final = data.data = result.data;\n    return final;\n  } else return data.data;\n};\n\nconst getProducts = async (setData = null) => {\n  const products = await checkBase(data.products, productBase);\n  if (setData) return setData(products);\n  return products;\n};\n\nconst getCategories = async (withAll = false, setData = false) => {\n  const categories = await checkBase(data.categories, categoriesBase);\n  const result = withAll ? [{\n    _id: \"0\",\n    name: \"wszystkie\"\n  }, ...categories] : [...categories.data];\n  if (setData) return setData(result);\n  return result;\n};\n\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories };","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/methods/load.js"],"names":["noticeBase","productBase","categoriesBase","data","products","time","notices","categories","getOne","id","base","setData","setImage","response","ok","Error","images","getOneNotice","getOneProduct","getNotices","get","Array","isArray","checkBase","maxTime","Date","now","console","log","result","final","getProducts","getCategories","withAll","_id","name"],"mappings":"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","sourcesContent":["import * as noticeBase from \"../services/notices\";\r\nimport * as productBase from \"../services/products\";\r\nimport * as categoriesBase from \"../services/categories\";\r\n\r\nconst data = {\r\n    products: {\r\n        time: 0,\r\n        data: null,\r\n    },\r\n    notices: {\r\n        time: 0,\r\n        data: null,\r\n    },\r\n    categories: {\r\n        time: 0,\r\n        data: null,\r\n    },\r\n};\r\n\r\nconst getOne = async (id, base, setData = null, setImage = null) => {\r\n    if (id) {\r\n        const response = await base.getOne(id);\r\n        if (!response.ok) throw Error;\r\n        if (!setData) return response.data;\r\n        setData(response.data);\r\n        if (setImage) setImage(response.data.images);\r\n    }\r\n    return true;\r\n};\r\n\r\nconst getOneNotice = async (id, setData, setImage) => {\r\n    return await getOne(id, noticeBase, setData, setImage);\r\n};\r\n\r\nconst getOneProduct = async (id, setData, setImage) => {\r\n    return await getOne(id, productBase, setData, setImage);\r\n};\r\n\r\nconst getNotices = async (setData = null) => {\r\n    const notices = await noticeBase.get();\r\n    if (!Array.isArray(notices.data)) throw Error;\r\n    if (setData) return setData(notices.data);\r\n    return notices.data;\r\n};\r\n\r\nconst checkBase = async (data, base) => {\r\n    const maxTime = 600000;\r\n    if (!data.data || data.time - Date.now() > maxTime) {\r\n        console.log(\"pobieram\");\r\n        data.time = Date.now();\r\n        const result = await base.get();\r\n        let final;\r\n        final = data.data = result.data;\r\n        return final;\r\n    } else return data.data;\r\n};\r\n\r\nconst getProducts = async (setData = null) => {\r\n    const products = await checkBase(data.products, productBase);\r\n    if (setData) return setData(products);\r\n    return products;\r\n};\r\n\r\nconst getCategories = async (withAll = false, setData = false) => {\r\n    const categories = await checkBase(data.categories, categoriesBase);\r\n    const result = withAll\r\n        ? [{ _id: \"0\", name: \"wszystkie\" }, ...categories]\r\n        : [...categories.data];\r\n\r\n    if (setData) return setData(result);\r\n    return result;\r\n};\r\n\r\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories };\r\n"]},"metadata":{},"sourceType":"module"}