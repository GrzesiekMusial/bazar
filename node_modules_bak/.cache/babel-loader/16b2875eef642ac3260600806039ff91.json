{"ast":null,"code":"import * as noticesBase from \"../services/notices\";\nimport * as productsBase from \"../services/products\";\nimport * as categoriesBase from \"../services/categories\";\nimport { cubby } from \"./cubby\";\n\nconst checkBase = async (cubby, base, setProgress = false) => {\n  const maxTime = 600000;\n\n  if (!cubby.data || cubby.time - Date.now() > maxTime) {\n    cubby.time = Date.now();\n    const result = await base.get(setProgress);\n    let final;\n    final = cubby.data = result.data;\n    return final;\n  } else return cubby.data;\n};\n\nconst getOne = async (id, base, setData = null, setImage = null) => {\n  if (id) {\n    const value = base.filter(item => item._id === id);\n    if (!setData) return value;\n    setData(value[0]);\n    if (setImage) setImage(value[0].images);\n  }\n\n  return true;\n};\n\nconst getOneNotice = async (id, setData, setImage) => {\n  const notices = await checkBase(cubby.notices, noticesBase);\n  return await getOne(id, notices, setData, setImage);\n};\n\nconst getOneProduct = async (id, setData, setImage) => {\n  const products = await checkBase(cubby.products, productsBase);\n  return await getOne(id, products, setData, setImage);\n};\n\nconst getNotices = async (setData = null) => {\n  const notices = await checkBase(cubby.notices, noticesBase);\n  if (setData) return setData(notices);\n  return notices;\n};\n\nconst getProducts = async (setData = null, setProgress = null) => {\n  const products = await checkBase(cubby.products, productsBase, setProgress);\n  if (setData) return setData(products);\n  return products;\n};\n\nconst getCategories = async (withAll = false, setData = false) => {\n  const categories = await checkBase(cubby.categories, categoriesBase);\n  const result = withAll ? [{\n    _id: \"0\",\n    name: \"wszystkie\"\n  }, ...categories] : [...categories];\n  if (setData) return setData(result);\n  return result;\n};\n\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories };","map":{"version":3,"sources":["C:/dev/TESTY/TEST NATIVE/bazar/src/methods/load.js"],"names":["noticesBase","productsBase","categoriesBase","cubby","checkBase","base","setProgress","maxTime","data","time","Date","now","result","get","final","getOne","id","setData","setImage","value","filter","item","_id","images","getOneNotice","notices","getOneProduct","products","getNotices","getProducts","getCategories","withAll","categories","name"],"mappings":"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","sourcesContent":["import * as noticesBase from \"../services/notices\";\r\nimport * as productsBase from \"../services/products\";\r\nimport * as categoriesBase from \"../services/categories\";\r\nimport { cubby } from \"./cubby\";\r\n\r\nconst checkBase = async (cubby, base, setProgress = false) => {\r\n    const maxTime = 600000;\r\n    if (!cubby.data || cubby.time - Date.now() > maxTime) {\r\n        cubby.time = Date.now();\r\n        const result = await base.get(setProgress);\r\n        let final;\r\n        final = cubby.data = result.data;\r\n        return final;\r\n    } else return cubby.data;\r\n};\r\n\r\nconst getOne = async (id, base, setData = null, setImage = null) => {\r\n    if (id) {\r\n        const value = base.filter((item) => item._id === id);\r\n        if (!setData) return value;\r\n\r\n        setData(value[0]);\r\n        if (setImage) setImage(value[0].images);\r\n    }\r\n    return true;\r\n};\r\n\r\nconst getOneNotice = async (id, setData, setImage) => {\r\n    const notices = await checkBase(cubby.notices, noticesBase);\r\n    return await getOne(id, notices, setData, setImage);\r\n};\r\n\r\nconst getOneProduct = async (id, setData, setImage) => {\r\n    const products = await checkBase(cubby.products, productsBase);\r\n    return await getOne(id, products, setData, setImage);\r\n};\r\n\r\nconst getNotices = async (setData = null) => {\r\n    const notices = await checkBase(cubby.notices, noticesBase);\r\n    if (setData) return setData(notices);\r\n    return notices;\r\n};\r\n\r\nconst getProducts = async (setData = null, setProgress = null) => {\r\n    const products = await checkBase(cubby.products, productsBase, setProgress);\r\n    if (setData) return setData(products);\r\n    return products;\r\n};\r\n\r\nconst getCategories = async (withAll = false, setData = false) => {\r\n    const categories = await checkBase(cubby.categories, categoriesBase);\r\n    const result = withAll\r\n        ? [{ _id: \"0\", name: \"wszystkie\" }, ...categories]\r\n        : [...categories];\r\n\r\n    if (setData) return setData(result);\r\n    return result;\r\n};\r\n\r\nexport { getOneNotice, getOneProduct, getNotices, getProducts, getCategories };\r\n"]},"metadata":{},"sourceType":"module"}